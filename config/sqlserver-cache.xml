<?xml version="1.0" encoding="UTF-8"?>

<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor 
	license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to 
	You under the Apache License, Version 2.0 (the "License"); you may not use 
	this file except in compliance with the License. You may obtain a copy of 
	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->

<!-- Ignite Spring configuration file to startup Ignite cache. This file 
	demonstrates how to configure cache using Spring. Provided cache will be 
	created on node startup. Use this configuration file when running HTTP REST 
	examples (see 'examples/rest' folder). When starting a standalone node, you 
	need to execute the following command: {IGNITE_HOME}/bin/ignite.{bat|sh} 
	examples/config/example-cache.xml When starting Ignite from Java IDE, pass 
	path to this file to Ignition: Ignition.start("examples/config/example-cache.xml"); -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util
    	http://www.springframework.org/schema/util/spring-util-2.5.xsd">

	<bean id="myDataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.microsoft.sqlserver.jdbc.SQLServerDriver" />
		<property name="url"
			value="jdbc:sqlserver://LAPTOP-QIT4AVOG\MSSQLSERVER64;databaseName=PrimeOne;integratedSecurity=true" />
	</bean>

	<bean id="ignite.cfg" class="org.apache.ignite.configuration.IgniteConfiguration">
	
		<property name="binaryConfiguration">
			<bean class="org.apache.ignite.configuration.BinaryConfiguration">
				<property name="compactFooter" value="false" />
			</bean>
		</property>

		<property name="cacheConfiguration">
			<list>
				<!-- Partitioned cache example configuration (Atomic mode). -->
				<bean class="org.apache.ignite.configuration.CacheConfiguration">

					<property name="atomicityMode" value="ATOMIC" />
					<property name="backups" value="1" />
					<property name="readThrough" value="true" />
					<property name="writeThrough" value="true" />
					<property name="cacheStoreFactory">
						<bean
							class="org.apache.ignite.cache.store.jdbc.CacheJdbcPojoStoreFactory">
							<!--  <property name="dataSourceBean" value="myDataSource" />  -->
							<property name="dataSource" ref="myDataSource" />
							<property name="types">
								<list>
									<bean class="org.apache.ignite.cache.store.jdbc.JdbcType">
										<property name="cacheName" value="buCache" />
										<property name="databaseTable" value="BusinessUnit" />
										<property name="keyType" value="java.lang.Integer" />
										<property name="keyFields">
											<list>
												<bean class="org.apache.ignite.cache.store.jdbc.JdbcTypeField">
													<property name="databaseFieldType">
														<util:constant static-field="java.sql.Types.BIGINT" />
													</property>
													<property name="databaseFieldName" value="BUID" />
													<property name="javaFieldType" value="java.lang.Integer" />
													<property name="javaFieldName" value="buid" />
												</bean>
											</list>
										</property>
										<property name="valueType" value="models.BusinessUnit" />
										<property name="valueFields">
											<list>
												<bean class="org.apache.ignite.cache.store.jdbc.JdbcTypeField">
													<property name="databaseFieldType">
														<util:constant static-field="java.sql.Types.BIGINT" />
													</property>
													<property name="databaseFieldName" value="BUID" />
													<property name="javaFieldType" value="java.lang.Integer" />
													<property name="javaFieldName" value="buid" />
												</bean>
												<bean class="org.apache.ignite.cache.store.jdbc.JdbcTypeField">
													<property name="databaseFieldType">
														<util:constant static-field="java.sql.Types.VARCHAR" />
													</property>
													<property name="databaseFieldName" value="BUName" />
													<property name="javaFieldType" value="java.lang.String" />
													<property name="javaFieldName" value="buName" />
												</bean>
												<bean class="org.apache.ignite.cache.store.jdbc.JdbcTypeField">
													<property name="databaseFieldType">
														<util:constant static-field="java.sql.Types.BIGINT" />
													</property>
													<property name="databaseFieldName" value="CreatedByID" />
													<property name="javaFieldType" value="java.lang.Integer" />
													<property name="javaFieldName" value="createdByID" />
												</bean>
											</list>
										</property>
									</bean>
								</list>
							</property>
						</bean>
					</property>
				</bean>
			</list>
		</property>

		<!-- Explicitly configure TCP discovery SPI to provide list of initial 
			nodes. -->
		<property name="discoverySpi">
			<bean class="org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi">
				<property name="ipFinder">
					<!-- Ignite provides several options for automatic discovery that can 
						be used instead os static IP based discovery. For information on all options 
						refer to our documentation: http://apacheignite.readme.io/docs/cluster-config -->
					<!-- Uncomment static IP finder to enable static-based discovery of 
						initial nodes. -->
					<bean
						class="org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder">
						<!-- <bean class="org.apache.ignite.spi.discovery.tcp.ipfinder.multicast.TcpDiscoveryMulticastIpFinder"> -->
						<property name="addresses">
							<list>
								<!-- In distributed environment, replace with actual host IP address. -->
								<value>127.0.0.1:47500..47509</value>
							</list>
						</property>
					</bean>
				</property>
			</bean>
		</property>
	</bean>
</beans>
